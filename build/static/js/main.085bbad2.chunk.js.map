{"version":3,"sources":["components/Filter/Filter.module.css","App.module.css","components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","ContactForm","state","name","number","onNameChange","e","setState","currentTarget","value","onNumberChange","handleSubmit","preventDefault","props","onSubmit","reset","className","s","containerForm","this","formInput","type","onChange","btnForm","Component","ContactList","contacts","onDeleteContact","listOfContact","map","contact","itemOfListContact","itemNameContact","itemNumberContact","btnOfListContact","onClick","id","Filter","onChangeFilter","filterLabel","filterInput","App","filter","addContact","contactNew","find","toLowerCase","includes","alert","newContact","shortid","generate","prevState","contactId","getVisibleContacts","normolizedFilter","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","visibleContacts","container","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.085bbad2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterInput\":\"Filter_filterInput__26tE3\",\"filterLabel\":\"Filter_filterLabel__2Vhuw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3QFPU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listOfContact\":\"ContactList_listOfContact__1Edg9\",\"itemOfListContact\":\"ContactList_itemOfListContact__2Wqps\",\"itemNameContact\":\"ContactList_itemNameContact__21qft\",\"itemNumberContact\":\"ContactList_itemNumberContact__3dv93\",\"btnOfListContact\":\"ContactList_btnOfListContact__1B02U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerForm\":\"ContactForm_containerForm__2l_1O\",\"formInput\":\"ContactForm_formInput__12-1L\",\"btnForm\":\"ContactForm_btnForm__uzc6I\"};","import { Component } from 'react';\nimport s from './ContactForm.module.css';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  onNameChange = e => {\n    this.setState({ name: e.currentTarget.value });\n  };\n\n  onNumberChange = e => {\n    this.setState({ number: e.currentTarget.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <form className={s.containerForm} onSubmit={this.handleSubmit}>\n        <label>\n          <p>Name</p>\n          <input\n            className={s.formInput}\n            type=\"text\"\n            onChange={this.onNameChange}\n          />\n        </label>\n        <label>\n          <p>Number</p>\n          <input\n            className={s.formInput}\n            type=\"text\"\n            onChange={this.onNumberChange}\n          />\n        </label>\n        <button className={s.btnForm} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\n\nfunction ContactList({ contacts = [], onDeleteContact }) {\n  return (\n    <>\n      <ul className={s.listOfContact}>\n        {contacts.map(contact => (\n          <li key={contact.id} className={s.itemOfListContact}>\n            <p className={s.itemNameContact}>{contact.name} </p>\n            <p className={s.itemNumberContact}>{contact.number}</p>\n            <button\n              className={s.btnOfListContact}\n              type=\"button\"\n              onClick={() => onDeleteContact(contact.id)}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n};\n\nexport default ContactList;\n","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\nconst Filter = ({ value = '', onChangeFilter }) => {\n  return (\n    <>\n      <label className={s.filterLabel}>\n        Filter contacts by name\n        <input\n          className={s.filterInput}\n          type=\"text\"\n          value={value}\n          onChange={onChangeFilter}\n        />\n      </label>\n    </>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n};\n\nexport default Filter;\n","import './App.css';\nimport s from './App.module.css';\nimport { Component } from 'react';\nimport shortid from 'shortid';\nimport contacts from './contacts.json';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\nimport PropTypes from 'prop-types';\n\nclass App extends Component {\n  state = {\n    contacts: contacts,\n    filter: '',\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem('contact', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  addContact = contactNew => {\n    if (\n      this.state.contacts.find(contact =>\n        contact.name.toLowerCase().includes(contactNew.name.toLowerCase()),\n      )\n    ) {\n      alert(`${contactNew.name} is already in contacts`);\n    } else {\n      const newContact = {\n        id: shortid.generate(),\n        name: contactNew.name,\n        number: contactNew.number,\n      };\n      this.setState(prevState => ({\n        contacts: [newContact, ...prevState.contacts],\n      }));\n    }\n  };\n\n  onDeleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contactId !== contact.id),\n      filter: '',\n    }));\n  };\n\n  onChangeFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n\n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n    const normolizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normolizedFilter),\n    );\n  };\n\n  render() {\n    const visibleContacts = this.getVisibleContacts();\n    return (\n      <div className={s.container}>\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={this.addContact} />\n        <h2>Contacts</h2>\n        <Filter\n          value={this.state.filter}\n          onChangeFilter={this.onChangeFilter}\n        />\n        <ContactList\n          contacts={visibleContacts}\n          onDeleteContact={this.onDeleteContact}\n        />\n      </div>\n    );\n  }\n};\n\nApp.propTypes = {\n  contacts: PropTypes.array,\n  filter: PropTypes.string,\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}